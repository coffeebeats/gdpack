name: "🏗️ Compile: Rust crate/workspace"
description: "Uses 'cargo' to compile the root project with caching enabled."

inputs:
  manifest:
    description: "A path to the project's 'Cargo.toml'."
    required: false
    default: "Cargo.toml"
  profile:
    description: "Build the project with the specified optimization profile."
    required: false
    default: "release"
  platform:
    description: "Compile the project for the target platform (defaults to host triple)."
    required: false
  targets:
    description: "A comma- or new line-separated list of project targets to build (e.g. lib or bins)."
    required: false
    default: "all"
  use_cross:
    description: "Whether to use 'cross' for compilation."
    required: false
    default: false
  skip_build:
    description: "Whether to skip the 'cargo build' invocation."
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Define common 'rust' properties
      id: rs-props
      shell: bash
      run: |
        RUSTC_VERSION="$(rustc --version | sed 's/rustc \(.*\) (.*/\1/')"
        echo "rustc=$RUSTC_VERSION" >> $GITHUB_OUTPUT
        echo "set rustc=$RUSTC_VERSION"

        PY_RELPATH='import os,sys; print(os.path.relpath(sys.stdin.read()))'
        CRATE_DIR="$(echo $(dirname ${{ inputs.manifest }}) | python3 -c "$PY_RELPATH")"
        echo "crate_dir=$CRATE_DIR" >> $GITHUB_OUTPUT
        echo "set crate_dir=$CRATE_DIR"

        HOST_TRIPLE="$(rustc -v --version | grep host | sed 's/.*[ ]//')"
        PLATFORM="$(t="${{ inputs.platform }}"; echo "${t:-$HOST_TRIPLE}")"
        echo "platform=$PLATFORM" >> $GITHUB_OUTPUT
        echo "set platform=$PLATFORM"

    - name: Cache 'cargo' home directory
      id: cache-cargo-home
      uses: actions/cache@v3
      with:
        key: cache-cargo-home-${{ runner.os }}-${{ steps.rs-props.outputs.rustc }}-${{ hashFiles('.github/workflows/**') }}
        path: |
          ~/.cargo/bin
        restore-keys: |
          cache-cargo-home-${{ runner.os }}-${{ steps.rs-props.outputs.rustc }}-
          cache-cargo-home-${{ runner.os }}-

    - name: Cache 'cargo' registry
      id: cache-cargo-registry
      uses: actions/cache@v3
      with:
        key: cache-cargo-registry-${{ runner.os }}-${{ inputs.platform }}-${{ steps.rs-props.outputs.rustc }}-${{ hashFiles('Cargo.lock') }}
        path: |
          ~/.cargo/git/db/
          ~/.cargo/registry/cache/
          ~/.cargo/registry/index/
        restore-keys: |
          cache-cargo-registry-${{ runner.os }}-${{ inputs.platform }}-${{ steps.rs-props.outputs.rustc }}-
          cache-cargo-registry-${{ runner.os }}-${{ inputs.platform }}-
          cache-cargo-registry-${{ runner.os }}-

    - name: Cache 'cargo' build artifacts
      id: cache-cargo-build
      uses: actions/cache@v3
      with:
        key: cache-cargo-build-${{ runner.os }}-${{ inputs.platform }}-${{ steps.rs-props.outputs.rustc }}-${{ hashFiles('src/**/*.rs', 'Cargo.toml', 'Cargo.lock', '.cargo/config.toml') }}
        path: |
          ${{ steps.rs-props.outputs.crate_dir }}/target
          ${{ steps.rs-props.outputs.crate_dir }}/vendor
        restore-keys: |
          cache-cargo-build-${{ runner.os }}-${{ inputs.platform }}-${{ steps.rs-props.outputs.rustc }}-
          cache-cargo-build-${{ runner.os }}-${{ inputs.platform }}-

    - name: Install 'cross' for cross-compilation
      if: |
        inputs.skip_build != 'true' &&
        inputs.use_cross == 'true' &&
        steps.cache-cargo-home.outputs.cache-hit != 'true'
      shell: bash
      run: cargo install --force cross --git https://github.com/cross-rs/cross

    - name: Fetch project dependencies
      if: |
        inputs.skip_build != 'true' &&
        steps.cache-cargo-registry.outputs.cache-hit != 'true'
      shell: bash
      run: cargo fetch --target ${{ steps.rs-props.outputs.platform }}

    - name: Vendor project dependencies
      if: |
        inputs.skip_build != 'true' &&
        steps.cache-cargo-build.outputs.cache-hit != 'true'
      shell: bash
      run: cargo vendor --manifest-path=${{ inputs.manifest }} --frozen

    - name: Compile the project
      if: |
        inputs.skip_build != 'true' && 
        steps.cache-cargo-build.outputs.cache-hit != 'true'
      shell: bash
      run: |
        TARGETS=()
        case "${{ inputs.targets }}" in
        "" | "*" | "all") TARGETS+=("--all-targets") ;;
        *)
          for t in $(printf "${{ inputs.targets }}" | tr ',' \\n); do
            TARGETS+=("--$t")
          done
          ;;
        esac

        CMD=$([[ "${{ inputs.use_cross }}" == "true" ]] && echo cross || echo cargo)

        $CMD build \
          --frozen \
          --manifest-path=${{ inputs.manifest }} \
          --profile=${{ inputs.profile }} \
          --target=${{ steps.rs-props.outputs.platform }} \
          "${TARGETS[@]}"
